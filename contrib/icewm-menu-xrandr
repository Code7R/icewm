#!/usr/bin/perl
#
# Create config to enable some popular monitor configurations
#
# Copyright (c) 2017 Eduard Bloch
# License: Simplified BSD License
#
#use Data::Dumper;

use strict;

my $curmon;
my $primary;
my @connected;
my $disco;
my @active;

my $readedid;
my $curedid;
my %realname;

# can be disabled if something goes wrong with sysfs data lookup
my $useSysfs=1;

my $xrandr = "xrandr";

# start of the EDID descriptor which contains the display name
my $header = chr(0).chr(0xfc).chr(0);
my $end = chr(0x0a);

if($useSysfs)
{
        # xrandr --verbose can be slow, grab data from sysfs if possible
        # Unclear how to map X screens to DRM reliably, use the shortcut only
        # when just one graphics card is installed.
        my @drmCards = <"/sys/devices/*/*/*/drm/card*">;
        if($#drmCards == 0)
        {
                foreach(<"/sys/devices/*/*/*/drm/card0/card0-*/edid">)
                {
                        my $fd;
                        my $data;
                        my $hdump;
                        if(open($fd, $_))
                        {
                                /card0.card0-([^\/]+)\/edid/;
                                my $connector = $1;
                                read $fd, $data, 4000;
                                #$hdump = unpack("H*", $data);
                                #$realname{$connector} = pack("H*", $1) if($hdump =~ /00fc00(.*?)0a/)
                                #
                                # digging through descriptors, https://en.wikipedia.org/wiki/Extended_Display_Identification_Data
                                my $pos = index $data, $header, 54;
                                if($pos>0)
                                {
                                        $data = substr $data, $pos+3, 15;
                                        # sanitize first or further RE fail on binary cruft
                                        $data =~ s/\W/ /g;
                                        $data =~ s/ *$|^\W*//g;
                                        #print "# sysfs name: $data\n";
                                        $realname{$connector} = $data.'~'.$connector;
                                }
                        }
                }
        }
}
my $fishEdid = !%realname;
$xrandr.=" --verbose" if $fishEdid;

# the disconnected displays might become zombies... make sure to turn them off
my $turnRestOff ="";

for(`$xrandr`)
{
        if(/^(\S+)\s+(connected|disconnected)\s+(primary)?/)
        {
                $curmon = $1;
                $primary = $curmon if $3;
                $disco = ($2 eq "disconnected");
                if($disco)
                {
                        $turnRestOff.=" --display $curmon --off";
                }
                else
                {
                        push(@connected, $curmon);
                }
        }
        # detect active only when there is a flag in the resolution list...
        push(@active, $curmon) if(/^\s.*\*/ && !$disco);
        if($fishEdid)
        {
                # another bit of interest is the EDID stuff, while we are at it...
                if(/EDID:/)
                {
                        $readedid = 1;
                        $curedid = "";
                }
                elsif(!/:/)
                {
                        if($readedid)
                        {
                                /(\w+)/;
                                $curedid.=$1;
                        }
                }
                else
                {
                        if($readedid)
                        {
                                $readedid = 0;
                                if($curedid =~ /00fc00(.*?)0a/)
                                {
                                        my $name=pack("H*", $1);
                                        # XXX: not sure about endian, check EDID spec
                                        #print "moo, $curedid is $1 for $curmon aka $name\n";
                                        $realname{$curmon} = $name.'~'.$curmon;
                                }
                        }
                }
        }
}

# has primary become disconnected? Just removed? Let the first one be primary then
$primary=$connected[0] if($primary && !grep(/$primary/, @connected));
print "# Next primary: $primary\n";

#print Dumper(\@active,\@connected,$primary, \%realname);

my $second;
# assuming that the primary is always among the connected screens...
# but prefer those which are already active
foreach(@active, @connected)
{
        next if $_ eq $primary;
        $second = $_;
        last;
}

my @notPrimary = grep {$_ ne $primary} @connected;
my @notPrimOrSec = grep {$_ ne $primary && $_ ne $second} @connected;
my $turnNonPrimSecOff = join(" ", map { "--output '$_' --off" } @notPrimOrSec);

sub getName {
        my $id = shift;
        return $realname{$id} if exists $realname{$id};
        
        # uber-clever xrandr hides the bustype prefix if the name is unambiguous but the kernel doesn't, so try to find the real name there
        foreach("A", "D", "I")
        {
                my $altName = $id;
                return $realname{$altName} if($altName =~ s/-(\d)/-A-$1/ && exists $realname{$altName});
        }
        return $id;
}

# single head activation
my $i=1;
foreach my $mon ($primary, @notPrimary)
{
        my $cmd = "prog '". getName($mon)."' setscreen$i sh -c 'xrandr ".
        join(" ", map { "--output $_ ".($_ eq $mon ? "--auto --primary" : "--off") } @connected)
        ."$turnRestOff'\n";
        print $cmd;

        $i++;
}

exit 0 if 1 == @connected;

# predefined multihead setups
my $cmd = "prog '".getName($primary)." + ".getName($second)."' setscreen12 sh -c 'xrandr --output $second --auto --right-of $primary $turnNonPrimSecOff $turnRestOff'\n";
print $cmd;

my $cmd = "prog '".getName($second)." + ".getName($primary)."' setscreen21 sh -c 'xrandr --output $second --auto --left-of $primary $turnNonPrimSecOff $turnRestOff'\n";
print $cmd;

my $cmd = "prog '".join(" / ", map { getName($_) } @connected)."' setscreen_all sh -c 'xrandr "
.join(" ", map { "--output $_ --auto ".( $_ eq $primary ? "" : "--same-as $primary")} @connected)
."$turnRestOff'\n";
print $cmd;

my $prev="";
my $cmd = "# all monitors connected from left to right\nprog '"
.join(" + ", map { getName($_) } @connected)."' setscreen_chain sh -c 'xrandr";
for(@connected)
{
        $cmd.=" --output $_ --auto";
        $cmd.=" --right-of $prev" if $prev;
        $prev=$_;
}
$cmd.="$turnRestOff'\n";
print $cmd;

